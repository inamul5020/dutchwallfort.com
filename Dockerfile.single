# Single Dockerfile for Dutch Wall Fort - Frontend + Backend
# This runs both frontend and backend in one container

# Stage 1: Build Frontend
FROM node:20-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy frontend package files
COPY package.json package-lock.json* ./

# Install frontend dependencies
RUN npm install

# Copy frontend source code
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./
COPY vite.config.ts ./
COPY tsconfig.json ./
COPY tsconfig.node.json ./

# Build frontend for production
RUN npm run build

# Stage 2: Build Backend
FROM node:20-alpine AS backend-builder

WORKDIR /app/backend

# Install system dependencies
RUN apk add --no-cache \
    openssl \
    ca-certificates \
    curl

# Copy backend package files
COPY backend/package.json backend/package-lock.json* ./

# Install backend dependencies
RUN npm install --only=production

# Copy backend source code
COPY backend/ ./

# Generate Prisma client
RUN npx prisma generate

# Build backend for production
RUN npm run build

# Stage 3: Production Runtime
FROM node:20-alpine AS production

# Install system dependencies
RUN apk add --no-cache \
    openssl \
    ca-certificates \
    curl \
    nginx

WORKDIR /app

# Copy built backend
COPY --from=backend-builder /app/backend/.next ./.next
COPY --from=backend-builder /app/backend/public ./public
COPY --from=backend-builder /app/backend/package.json ./package.json
COPY --from=backend-builder /app/backend/node_modules ./node_modules
COPY --from=backend-builder /app/backend/prisma ./prisma
COPY --from=backend-builder /app/backend/lib ./lib
COPY --from=backend-builder /app/backend/config ./config
COPY --from=backend-builder /app/backend/templates ./templates
COPY --from=backend-builder /app/backend/next.config.ts ./
COPY --from=backend-builder /app/backend/next-env.d.ts ./
COPY --from=backend-builder /app/backend/tsconfig.json ./
COPY --from=backend-builder /app/backend/env.mjs ./

# Copy built frontend to backend public directory
COPY --from=frontend-builder /app/frontend/dist ./public/frontend

# Copy custom Next.js configuration for serving frontend
COPY next.config.prod.js ./next.config.js

# Copy startup script
COPY start.sh ./start.sh
RUN chmod +x start.sh

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3000/api/health || exit 1

# Start the application
CMD ["./start.sh"]
